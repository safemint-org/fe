/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISafeMintAuditInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "ArbitrateProject(string,address,uint8)": EventFragment;
    "AuditProject(string,address,uint256,string,uint8)": EventFragment;
    "ChallengeProject(string,address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArbitrateProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuditProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengeProject"): EventFragment;
}

export type ArbitrateProjectEvent = TypedEvent<
  [string, string, number] & {
    name: string;
    arbitrator: string;
    status: number;
  }
>;

export type AuditProjectEvent = TypedEvent<
  [string, string, BigNumber, string, number] & {
    name: string;
    auditor: string;
    auditPrice: BigNumber;
    comments: string;
    status: number;
  }
>;

export type ChallengeProjectEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    name: string;
    challenger: string;
    challengePrice: BigNumber;
    comments: string;
  }
>;

export class ISafeMintAudit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISafeMintAuditInterface;

  functions: {};

  callStatic: {};

  filters: {
    "ArbitrateProject(string,address,uint8)"(
      name?: string | null,
      arbitrator?: string | null,
      status?: null
    ): TypedEventFilter<
      [string, string, number],
      { name: string; arbitrator: string; status: number }
    >;

    ArbitrateProject(
      name?: string | null,
      arbitrator?: string | null,
      status?: null
    ): TypedEventFilter<
      [string, string, number],
      { name: string; arbitrator: string; status: number }
    >;

    "AuditProject(string,address,uint256,string,uint8)"(
      name?: string | null,
      auditor?: string | null,
      auditPrice?: null,
      comments?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, number],
      {
        name: string;
        auditor: string;
        auditPrice: BigNumber;
        comments: string;
        status: number;
      }
    >;

    AuditProject(
      name?: string | null,
      auditor?: string | null,
      auditPrice?: null,
      comments?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, number],
      {
        name: string;
        auditor: string;
        auditPrice: BigNumber;
        comments: string;
        status: number;
      }
    >;

    "ChallengeProject(string,address,uint256,string)"(
      name?: string | null,
      challenger?: string | null,
      challengePrice?: null,
      comments?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        name: string;
        challenger: string;
        challengePrice: BigNumber;
        comments: string;
      }
    >;

    ChallengeProject(
      name?: string | null,
      challenger?: string | null,
      challengePrice?: null,
      comments?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        name: string;
        challenger: string;
        challengePrice: BigNumber;
        comments: string;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
