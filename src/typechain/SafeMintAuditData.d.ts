/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SafeMintAuditDataInterface extends ethers.utils.Interface {
  functions: {
    "ARBITRATOR_ROLE()": FunctionFragment;
    "AUDITOR_ROLE()": FunctionFragment;
    "auditPrice()": FunctionFragment;
    "auditRecord(uint256,uint256)": FunctionFragment;
    "challengePrice()": FunctionFragment;
    "challengeRecord(uint256,uint256)": FunctionFragment;
    "duration()": FunctionFragment;
    "feeRecord(uint256)": FunctionFragment;
    "safeMint()": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ARBITRATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUDITOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auditPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auditRecord",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "challengePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "challengeRecord",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "safeMint", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ARBITRATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUDITOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auditPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auditRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengeRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRecord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safeMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "ArbitrateProject(string,address,uint8)": EventFragment;
    "AuditProject(string,address,uint256,string,uint8)": EventFragment;
    "ChallengeProject(string,address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArbitrateProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuditProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChallengeProject"): EventFragment;
}

export type ArbitrateProjectEvent = TypedEvent<
  [string, string, number] & {
    name: string;
    arbitrator: string;
    status: number;
  }
>;

export type AuditProjectEvent = TypedEvent<
  [string, string, BigNumber, string, number] & {
    name: string;
    auditor: string;
    auditPrice: BigNumber;
    comments: string;
    status: number;
  }
>;

export type ChallengeProjectEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    name: string;
    challenger: string;
    challengePrice: BigNumber;
    comments: string;
  }
>;

export class SafeMintAuditData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SafeMintAuditDataInterface;

  functions: {
    ARBITRATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    AUDITOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    auditPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    auditRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, number] & {
        projectId: BigNumber;
        auditor: string;
        auditTime: BigNumber;
        comments: string;
        auditFee: BigNumber;
        status: number;
      }
    >;

    challengePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    challengeRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber] & {
        projectId: BigNumber;
        challenger: string;
        time: BigNumber;
        comments: string;
        challengeFee: BigNumber;
      }
    >;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        auditTime: BigNumber;
        auditor: string;
        value: BigNumber;
      }
    >;

    safeMint(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  ARBITRATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  AUDITOR_ROLE(overrides?: CallOverrides): Promise<string>;

  auditPrice(overrides?: CallOverrides): Promise<BigNumber>;

  auditRecord(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber, number] & {
      projectId: BigNumber;
      auditor: string;
      auditTime: BigNumber;
      comments: string;
      auditFee: BigNumber;
      status: number;
    }
  >;

  challengePrice(overrides?: CallOverrides): Promise<BigNumber>;

  challengeRecord(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber] & {
      projectId: BigNumber;
      challenger: string;
      time: BigNumber;
      comments: string;
      challengeFee: BigNumber;
    }
  >;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecord(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      auditTime: BigNumber;
      auditor: string;
      value: BigNumber;
    }
  >;

  safeMint(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ARBITRATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    AUDITOR_ROLE(overrides?: CallOverrides): Promise<string>;

    auditPrice(overrides?: CallOverrides): Promise<BigNumber>;

    auditRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, number] & {
        projectId: BigNumber;
        auditor: string;
        auditTime: BigNumber;
        comments: string;
        auditFee: BigNumber;
        status: number;
      }
    >;

    challengePrice(overrides?: CallOverrides): Promise<BigNumber>;

    challengeRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber] & {
        projectId: BigNumber;
        challenger: string;
        time: BigNumber;
        comments: string;
        challengeFee: BigNumber;
      }
    >;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        auditTime: BigNumber;
        auditor: string;
        value: BigNumber;
      }
    >;

    safeMint(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ArbitrateProject(string,address,uint8)"(
      name?: string | null,
      arbitrator?: string | null,
      status?: null
    ): TypedEventFilter<
      [string, string, number],
      { name: string; arbitrator: string; status: number }
    >;

    ArbitrateProject(
      name?: string | null,
      arbitrator?: string | null,
      status?: null
    ): TypedEventFilter<
      [string, string, number],
      { name: string; arbitrator: string; status: number }
    >;

    "AuditProject(string,address,uint256,string,uint8)"(
      name?: string | null,
      auditor?: string | null,
      auditPrice?: null,
      comments?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, number],
      {
        name: string;
        auditor: string;
        auditPrice: BigNumber;
        comments: string;
        status: number;
      }
    >;

    AuditProject(
      name?: string | null,
      auditor?: string | null,
      auditPrice?: null,
      comments?: null,
      status?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, number],
      {
        name: string;
        auditor: string;
        auditPrice: BigNumber;
        comments: string;
        status: number;
      }
    >;

    "ChallengeProject(string,address,uint256,string)"(
      name?: string | null,
      challenger?: string | null,
      challengePrice?: null,
      comments?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        name: string;
        challenger: string;
        challengePrice: BigNumber;
        comments: string;
      }
    >;

    ChallengeProject(
      name?: string | null,
      challenger?: string | null,
      challengePrice?: null,
      comments?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        name: string;
        challenger: string;
        challengePrice: BigNumber;
        comments: string;
      }
    >;
  };

  estimateGas: {
    ARBITRATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    AUDITOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    auditPrice(overrides?: CallOverrides): Promise<BigNumber>;

    auditRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    challengePrice(overrides?: CallOverrides): Promise<BigNumber>;

    challengeRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeMint(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ARBITRATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AUDITOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auditPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auditRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    challengePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    challengeRecord(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRecord(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
